// Generated by CoffeeScript 1.7.1
define(['jquery', 'bootstrap-wysiwyg'], function($) {
  var utils;
  return utils = {
    createMathEditor: function(input, preview, options) {
      var MathEditor;
      MathEditor = (function() {
        function MathEditor(input, preview, options) {
          this.input = input;
          this.preview = preview;
          this.options = options;
          this.init();
        }

        MathEditor.prototype.delay = 300;

        MathEditor.prototype.timeout = null;

        MathEditor.prototype.running = false;

        MathEditor.prototype.checking = false;

        MathEditor.prototype.init = function() {
          var check, checking, counter, display, interval, match, minimum, recurrence, thiz, url;
          thiz = this;
          $(this.input).wysiwyg();
          $(this.input).on('keypress', function() {
            return thiz.update();
          });
          $(this.input).on('paste', function(e) {
            var content;
            e.preventDefault();
            if (e.originalEvent.clipboardData) {
              content = (e.originalEvent || e).clipboardData.getData('text/plain');
              return document.execCommand('insertText', false, content);
            } else if (window.clipboardData) {
              content = window.clipboardData.getData('Text');
              return document.selection.createRange().pasteHTML(content);
            }
          });
          this.options = this.options || {};
          check = this.options.check || false;
          url = this.options.url || null;
          display = this.options.display || null;
          if (check && (url != null) && (display != null)) {
            interval = this.options.interval || 5000;
            minimum = this.options.minimum || 50;
            recurrence = this.options.recurrence || 3;
            counter = 0;
            match = true;
            checking = false;
            thiz = this;
            return $(this.input).keydown(function(e) {
              var address, text;
              if (counter < minimum) {
                return counter++;
              }
              if (!match) {
                return;
              }
              if (checking) {
                return;
              }
              text = $(thiz.input).cleanHtml();
              address = url + '?text=' + text;
              return $.get(address).done(function(data) {
                return true;
              }).fail(function(errors) {
                return false;
              });
            });
          }
        };

        MathEditor.prototype.update = function() {
          var thiz;
          thiz = this;
          if (this.timeout) {
            clearTimeout(this.timeout);
          }
          return this.timeout = setTimeout(function() {
            var content;
            if (thiz.running) {
              return;
            }
            content = $(thiz.input).html();
            $(thiz.preview).html(content);
            thiz.running = true;
            return MathJax.Hub.Queue(['Typeset', MathJax.Hub, $(thiz.preview)[0]], ['done', thiz]);
          }, this.delay);
        };

        MathEditor.prototype.done = function() {
          return this.running = false;
        };

        return MathEditor;

      })();
      return new MathEditor(input, preview, options);
    }
  };
});
