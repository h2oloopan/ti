// Generated by CoffeeScript 1.7.1
var Schema, mailer, me;

mailer = require('../helpers/mailer');

me = require('mongo-ember');

Schema = me.Schema;

module.exports = {
  User: {
    schema: {
      username: {
        type: String,
        required: true,
        match: /^[A-Z0-9\._-]+$/i
      },
      password: {
        type: String,
        required: true
      },
      email: {
        type: String,
        required: true,
        match: /^[A-Z0-9\._%+-]+@[A-Z0-9\.-]+\.[A-Z]{2,4}$/i
      },
      power: {
        type: Number,
        "default": 10
      },
      role: {
        type: Schema.Types.Mixed,
        "default": {}
      },
      privileges: {
        type: [Schema.Types.Mixed],
        "default": []
      }
    },
    validationMessages: {
      username: {
        required: 'Username cannot be empty',
        match: 'Invalid username'
      },
      password: {
        required: 'Password cannot be empty'
      },
      email: {
        required: 'Email cannot be empty',
        match: 'Invalid email address'
      }
    },
    api: {
      c: function(req, res, model, form, names) {
        var user;
        user = new model(form);
        return user.validate(function(err) {
          if (err) {
            return res.send(500, err.message);
          } else {
            return model.findOne({
              username: user.username
            }, function(err, result) {
              if (err) {
                return res.send(500, err.message);
              } else if (result != null) {
                return res.send(400, 'User ' + user.username + ' was already registered');
              } else {
                user.password = me.encrypt(user.password);
                return user.save(function(err, result) {
                  var originalUser;
                  if (err) {
                    return res.send(500, err.message);
                  } else {
                    originalUser = {
                      username: form.username,
                      password: form.password,
                      email: form.email
                    };
                    mailer.sendRegistrationMail(originalUser, function(err) {
                      if (err) {
                        return console.log(err);
                      }
                    });
                    return res.send(201, me.helper.wrap(result, names.name));
                  }
                });
              }
            });
          }
        });
      },
      u: function(req, res, model, form, cb) {
        if (form.password != null) {
          form.password = me.encrypt(form.password);
        }
        return model.findByIdAndUpdate(req.params.id, form, function(err, result) {
          if (err) {
            return res.send(500, err.message);
          } else {
            return res.send(200, me.helper.wrap(result, names, name));
          }
        });
      }
    },
    auth: {
      c: function(req, userObj, user, power, cb) {
        if (power >= 999) {
          return cb(null);
        } else {
          return cb(new Error('You do not have the permission to access this'));
        }
      },
      ra: function(req, userObj, user, power, cb) {
        if (power >= 999) {
          return cb(null);
        } else {
          return cb(new Error('You do not have the permission to access this'));
        }
      },
      ro: function(req, userObj, user, power, cb) {
        if (power >= 999) {
          return cb(null);
        } else {
          return cb(new Error('You do not have the permission to access this'));
        }
      },
      u: function(req, userObj, user, power, cb) {
        if (power >= 999) {
          return cb(null);
        } else {
          return cb(new Error('You do not have the permission to access this'));
        }
      },
      d: function(req, userObj, user, power, cb) {
        if (power >= 999) {
          return cb(null);
        } else {
          return cb(new Error('You do not have the permission to access this'));
        }
      }
    }
  }
};
