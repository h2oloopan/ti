// Generated by CoffeeScript 1.7.1
var Schema, me, moment;

me = require('mongo-ember');

moment = require('moment');

Schema = me.Schema;

module.exports = {
  Test: {
    schema: {
      name: {
        type: String,
        required: true
      },
      questions: {
        type: [Schema.Types.Mixed],
        "default": []
      },
      note: {
        type: String,
        "default": ''
      },
      settings: {
        type: Schema.Types.Mixed,
        "default": {}
      },
      "public": {
        type: Boolean,
        "default": false
      },
      school: {
        type: Schema.Types.ObjectId,
        ref: 'School',
        required: true
      },
      subject: {
        type: String,
        required: true
      },
      course: {
        type: String,
        required: true
      },
      creator: {
        type: Schema.Types.ObjectId,
        ref: 'User'
      },
      createdTime: {
        type: Date,
        "default": null
      },
      lastModifiedTime: {
        type: Date,
        "default": null
      }
    },
    validationMessages: {
      name: {
        required: 'Name cannot be empty'
      },
      school: {
        required: 'School cannot be empty'
      },
      subject: {
        required: 'subject cannot be empty'
      },
      course: {
        required: 'course cannot be empty'
      }
    },
    auth: {
      c: function(req, test, user, power, cb) {
        if (power > 0) {
          return cb(null);
        } else {
          return cb(new Error('You do not have the permission to access this'));
        }
      },
      ro: function(req, test, user, power, cb) {
        if (power > 0) {
          return cb(null);
        } else {
          return cb(new Error('You do not have the permission to access this'));
        }
      },
      ra: function(req, tests, user, power, cb) {
        if (power > 0) {
          return cb(null);
        } else {
          return cb(new Error('You do not have the permission to access this'));
        }
      },
      u: function(req, test, user, power, cb) {
        if (power > 0) {
          return cb(null);
        } else {
          return cb(new Error('You do not have the permission to access this'));
        }
      },
      d: function(req, test, user, power, cb) {
        if (power > 0) {
          return cb(null);
        } else {
          return cb(new Error('You do not have the permission to access this'));
        }
      }
    },
    before: {
      c: function(test, user, cb) {
        var question, time, _i, _len, _ref;
        if (user == null) {
          return cb(new Error('No user is present'));
        }
        time = moment().toDate();
        test.creator = me.ObjectId(user._id);
        test.createdTime = time;
        test.lastModifiedTime = time;
        _ref = test.questions;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          question = _ref[_i];
          question._id = me.ObjectId(question._id);
          question.editor = me.ObjectId(question.editor);
          question.school = me.ObjectId(question.school);
        }
        return cb(null, test);
      }
    },
    api: {
      ra: function(req, res, model, form, names) {
        var ids;
        ids = req.query.ids;
        if (ids != null) {
          ids = JSON.parse(ids);
        }
        if ((ids != null) && Object.prototype.toString.call(ids) === '[object Array]') {
          return model.find({
            _id: {
              $in: ids
            }
          }, function(err, result) {
            if (err) {
              return res.send(500, err.message);
            } else {
              return res.send(200, me.helper.wrap(result, names.name));
            }
          });
        } else {
          return model.find({}, function(err, result) {
            if (err) {
              return res.send(500, err.message);
            } else {
              return res.send(200, me.helper.wrap(result, names.cname));
            }
          });
        }
      }
    }
  }
};


/*
			ro: (req, res, model, form, names) ->
				id = JSON.parse req.params.id
				if Object.prototype.toString.call(id) == '[object Array]'
					 *is array
					model.find {_id: {$in: id}}, (err, result) ->
						if err
							res.send 500, err.message
						else
							res.send 200, me.helper.wrap result, names.cname
				else
					 *single one
					model.findById id, (err, result) ->
						if err
							res.send 500, err.message
						else
							res.send 200, me.helper.wrap result, names.name
 */
