// Generated by CoffeeScript 1.7.1
var Schema;

Schema = require('mongo-ember').Schema;

module.exports = {
  School: {
    schema: {
      name: {
        type: String,
        required: true
      },
      info: {
        type: Schema.Types.Mixed,
        "default": {
          terms: []
        }
      }
    },
    validationMessages: {
      name: {
        required: 'School name cannot be empty'
      }
    },
    api: {
      c: function(req, res, model, form, cb) {
        var school;
        school = new model(form);
        return school.validate(function(err) {
          var pattern;
          if (err) {
            return cb(err);
          } else {
            pattern = new RegExp('^' + school.name + '$', 'i');
            return model.findOne({
              name: pattern
            }, function(err, result) {
              if (err) {
                return cb(err);
              } else if (result != null) {
                return cb(new Error('School ' + school.name + ' was already in the database'));
              } else {
                return school.save(function(err, result) {
                  if (err) {
                    return cb(err);
                  } else {
                    return cb(null, {
                      code: 201,
                      data: result
                    });
                  }
                });
              }
            });
          }
        });
      }
    },
    auth: {
      c: function(req, user, power, cb) {
        if (power >= 999) {
          return cb(null);
        } else {
          return cb(new Error('You do not have the permission to access this'));
        }
      },
      u: function(req, user, power, cb) {
        if (power >= 999) {
          return cb(null);
        } else {
          return cb(new Error('You do not have the permission to access this'));
        }
      },
      d: function(req, user, power, cb) {
        if (power >= 999) {
          return cb(null);
        } else {
          return cb(new Error('You do not have the permission to access this'));
        }
      }
    },
    after: {
      ra: function(schools, user, cb) {
        var filter;
        if (user.power >= 999) {
          return cb(null, schools);
        } else {
          return filter = function(school, index) {
            var ans, course, info, privilege, subject, term, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3;
            ans = false;
            _ref = user.privileges;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              privilege = _ref[_i];
              if ((privilege.school != null) && privilege.school !== school) {
                continue;
              }
              ans = true;
              info = {};
              _ref1 = info.terms;
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                term = _ref1[_j];
                if ((privilege.term != null) && privilege.term !== term) {
                  continue;
                }
                _ref2 = term.subjects;
                for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
                  subject = _ref2[_k];
                  if ((privilege.subject != null) && privilege.subject !== subject) {
                    continue;
                  }
                  _ref3 = subject.courses;
                  for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
                    course = _ref3[_l];
                    if ((privilege.course != null) && privilege.course !== course) {
                      continue;
                    }
                  }
                }
              }
            }
            if (ans) {
              school.info = info;
            }
            return ans;
          };
        }
      }
    }
  }
};
