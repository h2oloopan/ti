fs = require 'fs'
path = require 'path'
clientJs = path.resolve path.dirname(__filename), '../client/me.js'
me = require './mongo-ember'

toSkip = [
	'__v'
]

toUnderscore = [
	'model'
]

typeMap =
	'String': 'string'
	'ObjectID': 'string'
	'Number': 'number'

models = '{'

createModel = (schema) ->
	js = ''
	keys = Object.keys schema
	count = 1
	for key in keys
		definition = schema[key]
		if toUnderscore.indexOf(key) >= 0 then js += '_'
		switch definition.instance
			when 'ObjectID'
				if definition.options.ref?
					js += key + ': DS.belongsTo("' + definition.options.ref.toLowerCase() + '")'
				else
					js += key + ': DS.attr("' + typeMap[definition.instance] + '")'
			when undefined
				js += key + ': DS.attr("json")'
			else
				js += key + ': DS.attr("' + typeMap[definition.instance] + '")'
		if count < keys.length then js += ', '
		count++
	return js

createAdapter = (schema) ->
	return (if me.settings.namespace then 'namespace: "' + me.settings.namespace + '"' else '')

createSerializer = (schema) ->
	js = ''
	if me.settings.primaryKey != 'id' then js += 'primaryKey: "' + me.settings.primaryKey + '"'
	return js

createValidations = (schema, validationMessages) ->
	json = {}
	keys = Object.keys schema
	for key in keys
		path = key
		if toUnderscore.indexOf(key) >= 0 then path = '_' + path
		json[path] = []
		options = schema[key].options
		for option of options
			switch option
				when 'required'
					json[path].push
						type: 'required'
						message: validationMessages[key].required
				when 'match'
					json[path].push
						type: 'match'
						message: validationMessages[key].match
						parameters: [options[option].toString()]
	return JSON.stringify json

createJs = (name, schema, validationMessages) ->
	js = name + ':{ '

	js += '
			model: {' + createModel(schema) + '},
			adapter: {' + createAdapter(schema) + '},
			serializer: {' + createSerializer(schema) + '},
			validations: ' + createValidations(schema, validationMessages) + '
		  '

	js += '},'
	return js

postProcess = (data) ->
	version = '' + data.length

	if models.charAt(models.length - 1) == ',' then models = models.substr(0, models.length - 1)
	data = data.replace '\'{{version}}\'', version
	data = data.replace '\'{{url_signup}}\'', '\'' + me.settings.authPath + '/signup' + '\''
	data = data.replace '\'{{url_login}}\'', '\'' + me.settings.authPath + '/login' + '\''
	data = data.replace '\'{{url_check}}\'', '\'' + me.settings.authPath + '/check' + '\''
	data = data.replace '\'{{url_logout}}\'', '\'' + me.settings.authPath + '/logout' + '\''
	data = data.replace '\'{{models}}\'', models + '}'
	return data


js = module.exports = 
	addModel: (model, validationMessages) ->
		name = model.modelName
		paths = model.schema.paths
		keys = Object.keys paths
		for key in keys
			if toSkip.indexOf(key) >= 0
				delete paths[key]
			
		js = createJs name, paths, validationMessages
		models += js
		
		
	bind: (app) ->
		app.get me.settings.mePath, (req, res) ->

			fs.readFile clientJs,
					encoding: 'utf8'
				, (err, data) ->
					if err
						res.send 500, err.message
					else
						res.set 'Content-Type', 'text/javascript'
						res.send 200, postProcess data