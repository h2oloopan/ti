path = require 'path'
fs = require 'fs'

mongoose = require 'mongoose'
mongo = require './mongo'
js = require './js'
api = require './api'
auth = require './auth'

settings = exports.settings = {}
requirements = exports.requirements = {}

me = module.exports = 
	Schema: mongoose.Schema
	getModel: (name) ->
		return mongoose.models[name]
	getSchema: (name) ->
		return mongo.getSchema name
	createModel: (name, schema, validationMessages) ->
		model = mongo.createModel name, schema
		js.addModel model, validationMessages
	loadModels: (folder) ->
		load = (dir) ->
			files = fs.readdirSync dir
			for file in files
				do (file) ->
					file = path.join dir, file
					if !fs.statSync(file).isDirectory()
						if path.extname(file) == settings.modelExtension
							obj = require file
							name = Object.keys(obj)[0]
							schema = obj[name].schema
							requirement = obj[name].auth
							validationMessages = obj[name].validationMessages
							me.createModel name, schema, validationMessages
							requirements[name] = requirement
					else
						#it's directory
						load file
		load folder
	connect: (connectionString, cb) ->
		mongoose.connect connectionString,
			server:
				socketOptions:
					keepAlive: 1

		mongoose.connection.on 'connected', ->
			console.log 'MongoDB connected'
			if cb? then cb()

		mongoose.connection.on 'disconnected', ->
			console.log 'MongoDB disconnected'

		mongoose.connection.on 'error', (err) ->
			console.log 'MongoDB returned with error ' + err

	setup: (options) ->
		settings.modelExtension = options.modelExtension || '.js'
		settings.modelsFolder = options.modelsFolder || null
		settings.namespace = options.namespace || null
		settings.connectionString = options.connectionString || null
		settings.primaryKey = options.primaryKey || '_id'
		settings.mePath = options.mePath || '/js/me.js'
		settings.userModel = options.userModel || 'User'
		settings.usernameField = options.usernameField || 'username'
		settings.passwordField = options.passwordField || 'password'
		settings.authPath = options.authPath || '/api/auth'
		settings.sessionKey = options.sessionKey || 'me'
		settings.uglify = options.uglify || false
		settings.powerField = options.powerField || 'power'
		settings.defaultPower = options.defaultPower || 1 #here we assume power is an integer and the larger the number is, the more privilege a user possesses

		settings.defaultRequirement = options.defaultRequirement || {}
		settings.defaultRequirement.c = settings.defaultRequirement.c || 10
		settings.defaultRequirement.r = settings.defaultRequirement.r || 10
		settings.defaultRequirement.u = settings.defaultRequirement.u || 10
		settings.defaultRequirement.d = settings.defaultRequirement.d || 10

		@loadModels settings.modelsFolder
		return @
	init: (app, cb) ->
		app.use auth.middleware
		js.bind app
		api.bind app
		auth.bind app
		
		if settings.connectionString?
			@connect settings.connectionString, cb

	

