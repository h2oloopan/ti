mongoose = require 'mongoose'
utils = require 'mongoose/lib/utils'
me = require './mongo-ember'
h = require './helper'

crud = (app, url, name) ->
	model = mongoose.models[name]
	cname = utils.toCollectionName name
	pf = me.settings.powerField
	authFunctions = me.getModelDefinition(name).auth
	apiFunctions = me.getModelDefinition(name).api
	if !authFunctions? then authFunctions = {}
	if !apiFunctions? then apiFunctions = {}
	dummyAuthFunction = (req, user, power, cb) ->
		cb null #this one always return true
	#c
	app.post url, (req, res) ->
		af = authFunctions.c || dummyAuthFunction
		power = if req.user then req.user[pf] else me.settings.defaultPower
		af req.user, power, (err) ->
			if err
				return res.send 401, err.message
			else
				if apiFunctions.c? then return apiFunctions.c req, res, model
				obj = h.unwrap req.body
				obj = new model obj
				obj.save (err, result) ->
					if err
						res.send 500, err.message
					else
						res.send 201, h.wrap result, name

	#r
	#r all
	app.get url, (req, res) ->
		af = authFunctions.ra || dummyAuthFunction
		power = if req.user then req.user[pf] else me.settings.defaultPower
		af req, req.user, power, (err) ->
			if err
				return res.send 401, err.message
			else
				if apiFunctions.ra? then return apiFunctions.ra req, res, model
				model.find {}, (err, result) ->
					if err
						res.send 500, err.message
					else
						res.send 200, h.wrap result, cname
	
	#r one
	app.get url + '/:id', (req, res) ->
		af = authFunctions.ro || dummyAuthFunction
		power = if req.user then req.user[pf] else me.settings.defaultPower
		af req, req.user, power, (err) ->
			if err
				return res.send 401, err.message
			else
				if apiFunctions.ro? then return apiFunctions.ro req, res, model
				id = req.params.id
				model.findById id, (err, result) ->
					if err
						res.send 500, err.message
					else
						res.send 200, h.wrap result, name

	#u
	app.put url + '/:id', (req, res) ->
		af = authFunctions.u || dummyAuthFunction
		power = if req.user then req.user[pf] else me.settings.defaultPower
		af req, req.user, power, (err) ->
			if err
				return res.send 401, err.message
			else
				if apiFunctions.u? then return apiFunctions.u req, res, model
				id = req.params.id
				obj = h.unwrap req.body
				model.findByIdAndUpdate id, obj, (err, result) ->
					if err
						res.send 500, err.message
					else
						res.send 200, h.wrap result, name

	#d
	app.delete url + '/:id', (req, res) ->
		af = authFunctions.d || dummyAuthFunction
		power = if req.user then req.user[pf] else me.settings.defaultPower
		af req, req.user, power, (err) ->
			if err
				return res.send 401, err.message
			else
				if apiFunctions.d? then return apiFunctions.d req, res, model
				id = req.params.id
				#why find and remove? to make sure cascading removal hooks are called
				model.findById id, (err, result) ->
					if err
						res.send 500, err.message
					else if !result?
						res.send 500, 'No matching item to delete'
					else
						result.remove (err, result) ->
							if err
								res.send 500, err.message
							else
								res.send 204




api = module.exports =
	bind: (app) ->
		root = '/' + (me.settings.namespace || '')	
		models = mongoose.models
		for name of models
			model = models[name]
			cname = utils.toCollectionName name
			url = root + '/' + cname
			crud app, url, name
			
		return