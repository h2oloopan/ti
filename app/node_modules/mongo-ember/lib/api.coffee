mongoose = require 'mongoose'
utils = require 'mongoose/lib/utils'
me = require './mongo-ember'
h = require './helper'

crud = (app, url, name) ->
	model = mongoose.models[name]
	cname = utils.toCollectionName name
	pf = me.settings.powerField
	authFunctions = me.getModelDefinition(name).auth
	apiFunctions = me.getModelDefinition(name).api
	beforeFunctions = me.getModelDefinition(name).before
	afterFunctions = me.getModelDefinition(name).after
	finalFunctions = me.getModelDefinition(name).final
	if !authFunctions? then authFunctions = {}
	if !apiFunctions? then apiFunctions = {}
	if !beforeFunctions? then beforeFunctions = {}
	if !afterFunctions? then afterFunctions = {}
	dummyAuthFunction = (req, obj, user, power, cb) ->
		cb null #this one always return true
	dummyFinalFunction = (data, cb) ->
		cb null, data
	#c
	app.post url, (req, res) ->
		af = authFunctions.c || dummyAuthFunction
		final = finalFunctions.c || dummyFinalFunction
		power = if req.user then req.user[pf] else me.settings.defaultPower
		obj = h.unwrap req.body
		af req, obj, req.user, power, (err) ->
			if err
				return res.send 401, err.message
			else
				#if apiFunctions.c? then return apiFunctions.c req, res, model
				#if we are overriding api completely, don't call before and after hooks
				if apiFunctions.c?
					apiFunctions.c req, res, model, obj, (err, result) ->
						if err
							res.send 500, err.message
						else
							final h.wrap(result.data, name), (err, data) ->
								if err
									res.send 500, err.message
								else
									res.send result.code, data
				else
					obj = new model obj
					if beforeFunctions.c?
						beforeFunctions.c obj, req.user, (err, obj) ->
							if err
								res.send 500, err.message
							else
								obj.save (err, result) ->
									if err
										res.send 500, err.message
									else
										if afterFunctions.c?
											afterFunctions.c result, req.user, (err, result) ->
												if err
													res.send 500, err.message
												else
													final h.wrap(result, name), (err, data) ->
														if err
															res.send 500, err.message
														else
															res.send 201, data
										else
											final h.wrap(result, name), (err, data) ->
												if err
													res.send 500, err.message
												else
													res.send 201, data
					else
						obj.save (err, result) ->
							if err
								res.send 500, err.message
							else
								#call after hooks, the returning does not depend on the result of it
								if afterFunctions.c? 
									afterFunctions.c result, req.user, (err, result) ->
										if err
											res.send 500, err.message
										else
											final h.wrap(result, name), (err, data) ->
												if err
													res.send 500, err.message
												else
													res.send 201, data
								else
									final h.wrap(result, name), (err, data) ->
										if err
											res.send 500, err.message
										else
											res.send 201, data


	#r
	#r all
	app.get url, (req, res) ->
		af = authFunctions.ra || dummyAuthFunction
		final = finalFunctions.ra || dummyFinalFunction
		power = if req.user then req.user[pf] else me.settings.defaultPower
		af req, null, req.user, power, (err) ->
			if err
				return res.send 401, err.message
			else
				#if apiFunctions.ra? then return apiFunctions.ra req, res, model
				if apiFunctions.ra?
					apiFunctions.ra req, res, model, null, (err, result) ->
						if err
							res.send 500, err.message
						else
							final h.wrap(result.data, cname), (err, data) ->
								if err
									res.send 500, err.message
								else
									res.send result.code, data
				else
					model.find {}, (err, result) ->
						if err
							res.send 500, err.message
						else if beforeFunctions.ra?
							beforeFunctions.ra result, req.user, (err, result) ->
								if err
									res.send 500, err.message
								else
									if afterFunctions.ra?
										afterFunctions.ra result, req.user, (err, result) ->
											if err
												res.send 500, err.message
											else
												final h.wrap(result, cname), (err, data) ->
													if err
														res.send 500, err.message
													else
														res.send 200, data
									else
										final h.wrap(result, cname), (err, data) ->
											if err
												res.send 500, err.message
											else
												res.send 200, data
						else
							if afterFunctions.ra?
								afterFunctions.ra result, req.user, (err, result) ->
									if err
										res.send 500, err.message
									else
										final h.wrap(result, cname), (err, data) ->
											if err
												res.send 500, err.message
											else
												res.send 200, data
							else
								final h.wrap(result, cname), (err, data) ->
									if err
										res.send 500, err.message
									else
										res.send 200, data
	
	#r one
	app.get url + '/:id', (req, res) ->
		af = authFunctions.ro || dummyAuthFunction
		final = finalFunctions.ro || dummyFinalFunction
		#TODO: DO THIS
		power = if req.user then req.user[pf] else me.settings.defaultPower
		af req, null, req.user, power, (err) ->
			if err
				return res.send 401, err.message
			else
				#if apiFunctions.ro? then return apiFunctions.ro req, res, model
				id = req.params.id
				if apiFunctions.ro?
					apiFunctions.ro req, res, model, {id: id}, (err, result) ->
						if err
							res.send 500, err.message
						else
							final h.wrap(result.data, name), (err, data) ->
								if err
									res.send 500, err.message
								else
									res.send result.code, data
				else
					model.findById id, (err, result) ->
						if err
							res.send 500, err.message
						else if beforeFunctions.ro?
							beforeFunctions.ro result, req.user, (err, result) ->
								if err
									res.send 500, err.message
								else
									if afterFunctions.ro? 
										afterFunctions.ro result, req.user, (err, result) ->
											if err
												res.send 500, err.message
											else
												final h.wrap(result, name), (err, data) ->
													if err
														res.send 500, err.message
													else
														res.send 200, data
									else
										final h.wrap(result, name), (err, data) ->
											if err
												res.send 500, err.message
											else
												res.send 200, data
						else
							if afterFunctions.ro?
								afterFunctions.ro result, req.user, (err, result) ->
									if err
										res.send 500, err.message
									else
										final h.wrap(result, name), (err, data) ->
											if err
												res.send 500, err.message
											else
												res.send 200, data
							else
								final h.wrap(result, name), (err, data) ->
									if err
										res.send 500, err.message
									else
										res.send 200, data

	#u
	app.put url + '/:id', (req, res) ->
		af = authFunctions.u || dummyAuthFunction
		final = finalFunctions.u || dummyFinalFunction
		power = if req.user then req.user[pf] else me.settings.defaultPower
		obj = h.unwrap req.body
		af req, obj, req.user, power, (err) ->
			if err
				return res.send 401, err.message
			else
				#if apiFunctions.u? then return apiFunctions.u req, res, model
				id = req.params.id
				obj._id = id
				if apiFunctions.u?
					apiFunctions.u req, res, model, obj, (err, result) ->
						if err
							res.send 500, err.message
						else
							final h.wrap(result.data, name), (err, data) ->
								if err
									res.send 500, err.message
								else
									res.send result.code, data
				else
					if beforeFunctions.u?
						beforeFunctions.u obj, req.user, (err, obj) ->
							if err
								res.send 500, err.message
							else
								model.findByIdAndUpdate id, obj, (err, result) ->
									if err
										res.send 500, err.message
									else
										if afterFunctions.u? 
											afterFunctions.u result, req.user, (err, result) ->
												if err
													res.send 500, err.message
												else
													final h.wrap(result, name), (err, data) ->
														if err
															res.send 500, err.message
														else
															res.send 200, data
										else
											final h.wrap(result, name), (err, data) ->
												if err
													res.send 500, err.message
												else
													res.send 200, data
					else
						model.findByIdAndUpdate id, obj, (err, result) ->
							if err
								res.send 500, err.message
							else
								if afterFunctions.u? 
									afterFunctions.u result, req.user, (err, result) ->
										if err
											res.send 500, err.message
										else
											final h.wrap(result, name), (err, data) ->
												if err
													res.send 500, err.message
												else
													res.send 200, data
								else
									final h.wrap(result, name), (err, data) ->
										if err
											res.send 500, err.message
										else
											res.send 200, data

	#d
	app.delete url + '/:id', (req, res) ->
		af = authFunctions.d || dummyAuthFunction
		final = finalFunctions.d || dummyFinalFunction
		power = if req.user then req.user[pf] else me.settings.defaultPower
		af req, null, req.user, power, (err) ->
			if err
				return res.send 401, err.message
			else
				#if apiFunctions.d? then return apiFunctions.d req, res, model
				id = req.params.id
				#why find and remove? to make sure cascading removal hooks are called
				if apiFunctions.d?
					apiFunctions.d req, res, model, {id: id}, (err, result) ->
						if err
							res.send 500, err.message
						else
							final h.wrap(result.data, name), (err, data) ->
								if err
									res.send 500, err.message
								else
									res.send 204, data
				else
					model.findById id, (err, result) ->
						if err
							res.send 500, err.message
						else if !result?
							res.send 500, 'No matching item to delete'
						else
							if beforeFunctions.d?
								beforeFunctions.d result, req.user, (err, result) ->
									if err
										res.send 500, err.message
									else
										result.remove (err, result) ->
											if err
												res.send 500, err.message
											else
												if afterFunctions.d? 
													afterFunctions.d result, req.user, (err, result) ->
														if err
															res.send 500, err.message
														else
															final h.wrap(result, name), (err, data) ->
																if err
																	res.send 500, err.message
																else
																	res.send 204, data
												else
													final h.wrap(result, name), (err, data) ->
														if err
															res.send 500, err.message
														else
															res.send 204, data

							else
								result.remove (err, result) ->
									if err
										res.send 500, err.message
									else
										if afterFunctions.d? 
											afterFunctions.d result, req.user, (err, result) ->
												if err
													res.send 500, err.message
												else
													final h.wrap(result, name), (err, data) ->
														if err
															res.send 500, err.message
														else
															res.send 204, data
										else
											final h.wrap(result, name), (err, data) ->
												if err
													res.send 500, err.message
												else
													res.send 204, data


api = module.exports =
	middleware: (req, res, next) ->
		if me.settings.namespace?
			if req.path.toLowerCase().indexOf(me.settings.namespace.toLowerCase()) >= 0
				res.set 'Last-Modified', (new Date()).toUTCString()
		next()
	bind: (app) ->
		root = '/' + (me.settings.namespace || '')	
		models = mongoose.models
		for name of models
			model = models[name]
			cname = utils.toCollectionName name
			url = root + '/' + cname
			crud app, url, name
			
		return