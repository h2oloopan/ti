crypto = require 'crypto'
mongoose = require 'mongoose'
utils = require 'mongoose/lib/utils'
me = require './mongo-ember'
h = require './helper'

serialize = (user, cb) ->
	cb null, user[me.settings.primaryKey]

deserialize = (id, cb) ->
	mongoose.models[me.settings.userModel].findById id, (err, result) ->
		if err
			cb err
		else if !result?
			cb new Error 'User does not exist'
		else
			cb null, result

prepare = (user) ->
	#hide password
	if user[me.settings.passwordField]?
		delete user[me.settings.passwordField]
	return user

authenticate = (user, cb) ->
	uf = me.settings.usernameField
	pf = me.settings.passwordField
	toAuth = {}
	toAuth[uf] = user[uf]
	toAuth[pf] = auth.encrypt user[pf]
	model = mongoose.models[me.settings.userModel]
	model.findOne toAuth, (err, result) ->
		if err
			cb err
		else if !result?
			cb new Error 'Cannot find a matching user'
		else
			cb null, result




login = (user, req, res) ->
	authenticate user, (err, user) ->
		if err
			res.send 500, err.message
		else
			user = user.toObject()
			serialize user, (err, id) ->
				if err
					res.send 500, err.message
				else
					req.session[me.settings.sessionKey] = id
					res.send 200, prepare user



auth = module.exports =
	encrypt: (input) ->
		sha = crypto.createHash 'sha256'
		sha.update input
		return sha.digest('hex').toString()
	bind: (app) ->
		uf = me.settings.usernameField
		pf = me.settings.passwordField
		url = me.settings.authPath
		name = me.settings.userModel
		cname = utils.toCollectionName name
		
		#override users api for authentication
		model = mongoose.models[name]
		
		#signup
		app.post url + '/signup', (req, res) ->
			user = h.unwrap req.body
			if !user[pf]?
				res.send 500, 'password must be present'
			else
				#check if the user already exist
				test = {}
				test[uf] = user[uf]
				model.findOne test, (err, result) ->
					if err
						res.send 500, err.message
					else if result?
						res.send 500, uf + ' was already registered'
					else
						user[pf] = auth.encrypt user[pf]
						user = new model user
						user.save (err, result) ->
							if err
								res.send 500, err.message
							else
								res.send 201, {}

		#check if logedin
		app.get url + '/check', (req, res) ->
			if req.user?
				res.send 200, prepare req.user
			else
				res.send 401

		#login
		app.post url + '/login', (req, res) ->
			user = h.unwrap req.body
			if !user[pf]?
				res.send 500, 'password must be present'
			else
				login user, req, res

		#logout
		app.get url + '/logout', (req, res) ->
			if req.session[me.settings.sessionKey]?
				req.session[me.settings.sessionKey] = null
			res.send 200, {}

		#power
		app.get url + '/power/:power', (req, res) ->
			if !req.user?
				res.send 401
			else
				uPower = req.user[me.settings.powerField]
				rPower = parseInt req.params.power
				if uPower >= rPower
					res.send 200, {}
				else
					res.send 401
					




	middleware: (req, res, next) ->
		id = req.session[me.settings.sessionKey]
		if id?
			deserialize id, (err, user) ->
				if err
					req['user'] = null
				else
					req['user'] = user.toObject()
				next()
		else
			req['user'] = null
			next()