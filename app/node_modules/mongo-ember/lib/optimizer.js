// Generated by CoffeeScript 1.7.1
var compile, exec, fs, minify, modulePath, optimizer, path, uglify, vm;

exec = require('child_process').exec;

path = require('path');

fs = require('fs');

vm = require('vm');

uglify = require('uglify-js');

modulePath = path.resolve(path.dirname(__filename), '../');

minify = function(folder, excludes, cb) {
  var doWork, err;
  doWork = function(dir) {
    var exclude, file, files, _fn, _i, _j, _len, _len1;
    for (_i = 0, _len = excludes.length; _i < _len; _i++) {
      exclude = excludes[_i];
      if (dir.indexOf(exclude) >= 0) {
        return;
      }
    }
    files = fs.readdirSync(dir);
    _fn = function(file) {
      var content, result;
      file = path.join(dir, file);
      if (!fs.statSync(file).isDirectory()) {
        if (path.extname(file) === '.js') {
          console.log('minifying ' + file);
          content = fs.readFileSync(file, {
            encoding: 'utf8'
          });
          result = uglify.minify(content, {
            fromString: true
          });
          return fs.writeFileSync(file, result.code);
        }
      } else {
        return doWork(file);
      }
    };
    for (_j = 0, _len1 = files.length; _j < _len1; _j++) {
      file = files[_j];
      _fn(file);
    }
  };
  try {
    doWork(folder);
    return cb(null);
  } catch (_error) {
    err = _error;
    return cb(err);
  }
};

compile = function(folder, ext, cb) {
  var EMBER, HANDLEBARS, doWork, err, getContext, getSandbox;
  HANDLEBARS = fs.readFileSync(path.join(modulePath, 'js/handlebars.js'), 'utf8');
  EMBER = fs.readFileSync(path.join(modulePath, 'js/ember.js'), 'utf8');
  getSandbox = function() {
    var element, jQuery, sandbox;
    jQuery = function() {
      return jQuery;
    };
    jQuery.ready = function() {
      return jQuery;
    };
    jQuery.inArray = function() {
      return jQuery;
    };
    jQuery.jquery = '1.8.3';
    jQuery.event = {
      fixHooks: {}
    };
    element = {
      firstChild: function() {
        return element;
      },
      innerHTML: function() {
        return element;
      },
      setAttribute: function() {
        return element;
      },
      appendChild: function() {
        return element;
      },
      innerHTML: '<input name="foo">',
      childNodes: [
        {
          nodeValue: 'Test: '
        }, {
          nodeValue: ''
        }, {
          nodeValue: 'Value'
        }
      ]
    };
    sandbox = {
      document: {
        createRange: false,
        createElement: function() {
          return element;
        }
      },
      console: console,
      jQuery: jQuery,
      $: jQuery,
      setTimeout: setTimeout
    };
    sandbox.window = sandbox;
    return sandbox;
  };
  getContext = function(extras) {
    var attr, context, sandbox;
    sandbox = getSandbox();
    extras = extras || {};
    for (attr in extras) {
      sandbox[attr] = extras[attr];
    }
    context = vm.createContext(sandbox);
    vm.runInContext(HANDLEBARS, context, 'handlebars.js');
    vm.runInContext(EMBER, context, 'ember.js');
    return context;
  };
  doWork = function(dir) {
    var file, files, _i, _len, _results;
    files = fs.readdirSync(dir);
    _results = [];
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      file = files[_i];
      _results.push((function(file) {
        var content, context, isComponent, out, result, template, templateJs, templateName;
        file = path.join(dir, file);
        if (!fs.statSync(file).isDirectory()) {
          if (path.extname(file) === ext) {
            content = fs.readFileSync(file, {
              encoding: 'utf8'
            });
            console.log('compiling ' + file);
            out = file.replace(ext, '.js');
            context = getContext({
              template: content,
              templatejs: null
            });
            vm.runInContext('templatejs = Ember.Handlebars.precompile(template).toString()', context);
            template = 'Ember.Handlebars.template(' + context.templatejs + ')';
            isComponent = out.toLowerCase().indexOf('components') >= 0;
            templateName = out.substr(0, out.length - 3);
            templateName = templateName.substr(templateName.lastIndexOf('/') + 1);
            if (isComponent) {
              templateName = 'components/' + templateName;
            }
            templateName = templateName.replace('.', '/');
            templateJs = 'Ember.TEMPLATES["' + templateName + '"] = ' + template + ';';
            console.log('minifying ' + out);
            result = uglify.minify(templateJs, {
              fromString: true
            });
            return fs.writeFileSync(out, result.code);
          }
        } else {
          return doWork(file);
        }
      })(file));
    }
    return _results;
  };
  try {
    doWork(folder);
    return cb(null);
  } catch (_error) {
    err = _error;
    return cb(err);
  }
};

optimizer = module.exports = {
  optimize: function(options) {
    var compileHandlebars, excludePath, folder, minifyJS, templateExtension, templateFolder, templatePath;
    compileHandlebars = options.compileHandlebars || false;
    minifyJS = options.minifyJS || false;
    folder = options.publicFolder || null;
    excludePath = options.excludePath || [];
    templatePath = options.templatePath || null;
    templateExtension = options.templateExtension || '.html';
    if (minifyJS && (folder != null)) {
      minify(folder, excludePath, function(err) {
        if (err) {
          console.log(err);
          return console.log(err.stack);
        } else {
          return console.log('JS minified...');
        }
      });
    }
    if (compileHandlebars && (folder != null) && (templatePath != null)) {
      templateFolder = path.join(folder, templatePath);
      return compile(templateFolder, templateExtension, function(err) {
        if (err) {
          console.log(err);
          return console.log(err.stack);
        } else {
          return console.log('Handlebars compiled...');
        }
      });
    }
  }
};
