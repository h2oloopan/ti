// Generated by CoffeeScript 1.7.1
var clientJs, createAdapter, createJs, createModel, createSerializer, createValidations, fs, js, me, models, path, postProcess, toSkip, toUnderscore, typeMap;

fs = require('fs');

path = require('path');

clientJs = path.resolve(path.dirname(__filename), '../client/me.js');

me = require('./mongo-ember');

toSkip = ['__v'];

toUnderscore = ['model'];

typeMap = {
  'String': 'string',
  'ObjectID': 'string',
  'Number': 'number'
};

models = '{';

createModel = function(schema) {
  var count, definition, js, key, keys, _i, _len;
  js = '';
  keys = Object.keys(schema);
  count = 1;
  for (_i = 0, _len = keys.length; _i < _len; _i++) {
    key = keys[_i];
    definition = schema[key];
    if (toUnderscore.indexOf(key) >= 0) {
      js += '_';
    }
    switch (definition.instance) {
      case 'ObjectID':
        if (definition.options.ref != null) {
          js += key + ': DS.belongsTo("' + definition.options.ref.toLowerCase() + '")';
        } else {
          js += key + ': DS.attr("' + typeMap[definition.instance] + '")';
        }
        break;
      case void 0:
        js += key + ': DS.attr("json")';
        break;
      default:
        js += key + ': DS.attr("' + typeMap[definition.instance] + '")';
    }
    if (count < keys.length) {
      js += ', ';
    }
    count++;
  }
  return js;
};

createAdapter = function(schema) {
  return (me.settings.namespace ? 'namespace: "' + me.settings.namespace + '"' : '');
};

createSerializer = function(schema) {
  var js;
  js = '';
  if (me.settings.primaryKey !== 'id') {
    js += 'primaryKey: "' + me.settings.primaryKey + '"';
  }
  return js;
};

createValidations = function(schema, validationMessages) {
  var json, key, keys, option, options, _i, _len;
  json = {};
  keys = Object.keys(schema);
  for (_i = 0, _len = keys.length; _i < _len; _i++) {
    key = keys[_i];
    path = key;
    if (toUnderscore.indexOf(key) >= 0) {
      path = '_' + path;
    }
    json[path] = [];
    options = schema[key].options;
    for (option in options) {
      switch (option) {
        case 'required':
          json[path].push({
            type: 'required',
            message: validationMessages[key].required
          });
          break;
        case 'match':
          json[path].push({
            type: 'match',
            message: validationMessages[key].match,
            parameters: [options[option].toString()]
          });
      }
    }
  }
  return JSON.stringify(json);
};

createJs = function(name, schema, validationMessages) {
  var js;
  js = name + ':{ ';
  js += 'model: {' + createModel(schema) + '}, adapter: {' + createAdapter(schema) + '}, serializer: {' + createSerializer(schema) + '}, validations: ' + createValidations(schema, validationMessages) + '';
  js += '},';
  return js;
};

postProcess = function(data) {
  var version;
  version = '' + data.length;
  if (models.charAt(models.length - 1) === ',') {
    models = models.substr(0, models.length - 1);
  }
  data = data.replace('\'{{version}}\'', version);
  data = data.replace('\'{{url_signup}}\'', '\'' + me.settings.authPath + '/signup' + '\'');
  data = data.replace('\'{{url_login}}\'', '\'' + me.settings.authPath + '/login' + '\'');
  data = data.replace('\'{{url_check}}\'', '\'' + me.settings.authPath + '/check' + '\'');
  data = data.replace('\'{{url_logout}}\'', '\'' + me.settings.authPath + '/logout' + '\'');
  data = data.replace('\'{{models}}\'', models + '}');
  return data;
};

js = module.exports = {
  js: null,
  addModel: function(model, validationMessages) {
    var key, keys, name, paths, _i, _len;
    name = model.modelName;
    paths = model.schema.paths;
    keys = Object.keys(paths);
    for (_i = 0, _len = keys.length; _i < _len; _i++) {
      key = keys[_i];
      if (toSkip.indexOf(key) >= 0) {
        delete paths[key];
      }
    }
    js = createJs(name, paths, validationMessages);
    return models += js;
  },
  bind: function(app) {
    var thiz;
    thiz = this;
    fs.readFile(clientJs, {
      encoding: 'utf8'
    }, function(err, data) {
      if (err) {
        return console.log(err);
      } else {
        thiz.js = postProcess(data);
        return fs.writeFile(me.settings.meOutputPath, thiz.js, function(err) {
          if (err) {
            return console.log(err);
          } else {
            return console.log('client-side me.js generated');
          }
        });
      }
    });
    return app.get(me.settings.mePath, function(req, res) {
      if (thiz.js == null) {
        return res.send(500, 'Something was wrong generating client me.js');
      } else {
        res.set('Content-Type', 'text/javascript');
        return res.send(200, thiz.js);
      }
    });
  }
};
