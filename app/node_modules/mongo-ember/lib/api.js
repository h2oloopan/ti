// Generated by CoffeeScript 1.7.1
var api, crud, h, me, mongoose, utils;

mongoose = require('mongoose');

utils = require('mongoose/lib/utils');

me = require('./mongo-ember');

h = require('./helper');

crud = function(app, url, name) {
  var afterFunctions, apiFunctions, authFunctions, beforeFunctions, cname, dummyAuthFunction, dummyFinalFunction, finalFunctions, model, pf;
  model = mongoose.models[name];
  cname = utils.toCollectionName(name);
  pf = me.settings.powerField;
  authFunctions = me.getModelDefinition(name).auth;
  apiFunctions = me.getModelDefinition(name).api;
  beforeFunctions = me.getModelDefinition(name).before;
  afterFunctions = me.getModelDefinition(name).after;
  finalFunctions = me.getModelDefinition(name).final;
  if (authFunctions == null) {
    authFunctions = {};
  }
  if (apiFunctions == null) {
    apiFunctions = {};
  }
  if (beforeFunctions == null) {
    beforeFunctions = {};
  }
  if (afterFunctions == null) {
    afterFunctions = {};
  }
  dummyAuthFunction = function(req, obj, user, power, cb) {
    return cb(null);
  };
  dummyFinalFunction = function(data, cb) {
    return cb(data);
  };
  app.post(url, function(req, res) {
    var af, final, obj, power;
    af = authFunctions.c || dummyAuthFunction;
    final = finalFunctions.c || dummyFinalFunction;
    power = req.user ? req.user[pf] : me.settings.defaultPower;
    obj = h.unwrap(req.body);
    return af(req, obj, req.user, power, function(err) {
      if (err) {
        return res.send(401, err.message);
      } else {
        if (apiFunctions.c != null) {
          return apiFunctions.c(req, res, model, obj, function(err, result) {
            if (err) {
              return res.send(500, err.message);
            } else {
              return final(h.wrap(result.data, name), function(data) {
                return res.send(result.code, data);
              });
            }
          });
        } else {
          obj = new model(obj);
          if (beforeFunctions.c != null) {
            return beforeFunctions.c(obj, req.user, function(err, obj) {
              if (err) {
                return res.send(500, err.message);
              } else {
                return obj.save(function(err, result) {
                  if (err) {
                    return res.send(500, err.message);
                  } else {
                    if (afterFunctions.c != null) {
                      return afterFunctions.c(result, req.user, function(err, result) {
                        if (err) {
                          return res.send(500, err.message);
                        } else {
                          return final(h.wrap(result, name), function(data) {
                            return res.send(201, data);
                          });
                        }
                      });
                    } else {
                      return final(h.wrap(result, name), function(data) {
                        return res.send(201, data);
                      });
                    }
                  }
                });
              }
            });
          } else {
            return obj.save(function(err, result) {
              if (err) {
                return res.send(500, err.message);
              } else {
                if (afterFunctions.c != null) {
                  return afterFunctions.c(result, req.user, function(err, result) {
                    if (err) {
                      return res.send(500, err.message);
                    } else {
                      return final(h.wrap(result, name), function(data) {
                        return res.send(201, data);
                      });
                    }
                  });
                } else {
                  return final(h.wrap(result, name), function(data) {
                    return res.send(201, data);
                  });
                }
              }
            });
          }
        }
      }
    });
  });
  app.get(url, function(req, res) {
    var af, final, power;
    af = authFunctions.ra || dummyAuthFunction;
    final = finalFunctions.ra || dummyFinalFunction;
    power = req.user ? req.user[pf] : me.settings.defaultPower;
    return af(req, null, req.user, power, function(err) {
      if (err) {
        return res.send(401, err.message);
      } else {
        if (apiFunctions.ra != null) {
          return apiFunctions.ra(req, res, model, null, function(err, result) {
            if (err) {
              return res.send(500, err.message);
            } else {
              return final(h.wrap(result.data, cname), function(data) {
                return res.send(result.code, data);
              });
            }
          });
        } else {
          return model.find({}, function(err, result) {
            if (err) {
              return res.send(500, err.message);
            } else if (beforeFunctions.ra != null) {
              return beforeFunctions.ra(result, req.user, function(err, result) {
                if (err) {
                  return res.send(500, err.message);
                } else {
                  if (afterFunctions.ra != null) {
                    return afterFunctions.ra(result, req.user, function(err, result) {
                      if (err) {
                        return res.send(500, err.message);
                      } else {
                        return final(h.wrap(result, cname), function(data) {
                          return res.send(200, data);
                        });
                      }
                    });
                  } else {
                    return final(h.wrap(result, cname), function(data) {
                      return res.send(200, data);
                    });
                  }
                }
              });
            } else {
              if (afterFunctions.ra != null) {
                return afterFunctions.ra(result, req.user, function(err, result) {
                  if (err) {
                    return res.send(500, err.message);
                  } else {
                    return final(h.wrap(result, cname), function(data) {
                      return res.send(200, data);
                    });
                  }
                });
              } else {
                return final(h.wrap(result, cname), function(data) {
                  return res.send(200, data);
                });
              }
            }
          });
        }
      }
    });
  });
  app.get(url + '/:id', function(req, res) {
    var af, final, power;
    af = authFunctions.ro || dummyAuthFunction;
    final = finalFunctions.ro || dummyFinalFunction;
    power = req.user ? req.user[pf] : me.settings.defaultPower;
    return af(req, null, req.user, power, function(err) {
      var id;
      if (err) {
        return res.send(401, err.message);
      } else {
        id = req.params.id;
        if (apiFunctions.ro != null) {
          return apiFunctions.ro(req, res, model, {
            id: id
          }, function(err, result) {
            if (err) {
              return res.send(500, err.message);
            } else {
              return final(h.wrap(result.data, name), function(data) {
                return res.send(result.code, data);
              });
            }
          });
        } else {
          return model.findById(id, function(err, result) {
            if (err) {
              return res.send(500, err.message);
            } else if (beforeFunctions.ro != null) {
              return beforeFunctions.ro(result, req.user, function(err, result) {
                if (err) {
                  return res.send(500, err.message);
                } else {
                  if (afterFunctions.ro != null) {
                    return afterFunctions.ro(result, req.user);
                  }
                  return res.send(200, h.wrap(result, name));
                }
              });
            } else {
              if (afterFunctions.ro != null) {
                return afterFunctions.ro(result, req.user, function(err, result) {
                  if (err) {
                    return res.send(500, err.message);
                  } else {
                    return res.send(200, h.wrap(result, name));
                  }
                });
              } else {
                return res.send(200, h.wrap(result, name));
              }
            }
          });
        }
      }
    });
  });
  app.put(url + '/:id', function(req, res) {
    var af, obj, power;
    af = authFunctions.u || dummyAuthFunction;
    power = req.user ? req.user[pf] : me.settings.defaultPower;
    obj = h.unwrap(req.body);
    return af(req, obj, req.user, power, function(err) {
      var id;
      if (err) {
        return res.send(401, err.message);
      } else {
        id = req.params.id;
        obj._id = id;
        if (apiFunctions.u != null) {
          return apiFunctions.u(req, res, model, obj, function(err, result) {
            if (err) {
              return res.send(500, err.message);
            } else {
              return res.send(result.code, h.wrap(result.data, name));
            }
          });
        } else {
          if (beforeFunctions.u != null) {
            return beforeFunctions.u(obj, req.user, function(err, obj) {
              if (err) {
                return res.send(500, err.message);
              } else {
                return model.findByIdAndUpdate(id, obj, function(err, result) {
                  if (err) {
                    return res.send(500, err.message);
                  } else {
                    if (afterFunctions.u != null) {
                      return afterFunctions.u(result, req.user, function(err, result) {
                        if (err) {
                          return res.send(500, err.message);
                        } else {
                          return res.send(200, h.wrap(result, name));
                        }
                      });
                    } else {
                      return res.send(200, h.wrap(result, name));
                    }
                  }
                });
              }
            });
          } else {
            return model.findByIdAndUpdate(id, obj, function(err, result) {
              if (err) {
                return res.send(500, err.message);
              } else {
                if (afterFunctions.u != null) {
                  return afterFunctions.u(result, req.user, function(err, result) {
                    if (err) {
                      return res.send(500, err.message);
                    } else {
                      return res.send(200, h.wrap(result, name));
                    }
                  });
                } else {
                  return res.send(200, h.wrap(result, name));
                }
              }
            });
          }
        }
      }
    });
  });
  return app["delete"](url + '/:id', function(req, res) {
    var af, power;
    af = authFunctions.d || dummyAuthFunction;
    power = req.user ? req.user[pf] : me.settings.defaultPower;
    return af(req, null, req.user, power, function(err) {
      var id;
      if (err) {
        return res.send(401, err.message);
      } else {
        id = req.params.id;
        if (apiFunctions.d != null) {
          return apiFunctions.d(req, res, model, {
            id: id
          }, function(err, result) {
            if (err) {
              return res.send(500, err.message);
            } else {
              return res.send(204, h.wrap(result.data, name));
            }
          });
        } else {
          return model.findById(id, function(err, result) {
            if (err) {
              return res.send(500, err.message);
            } else if (result == null) {
              return res.send(500, 'No matching item to delete');
            } else {
              if (beforeFunctions.d != null) {
                return beforeFunctions.d(result, req.user, function(err, result) {
                  if (err) {
                    return res.send(500, err.message);
                  } else {
                    return result.remove(function(err, result) {
                      if (err) {
                        return res.send(500, err.message);
                      } else {
                        if (afterFunctions.d != null) {
                          return afterFunctions.d(result, req.user, function(err, result) {
                            if (err) {
                              return res.send(500, err.message);
                            } else {
                              return res.send(204, h.wrap(result, name));
                            }
                          });
                        } else {
                          return res.send(204, h.wrap(result, name));
                        }
                      }
                    });
                  }
                });
              } else {
                return result.remove(function(err, result) {
                  if (err) {
                    return res.send(500, err.message);
                  } else {
                    if (afterFunctions.d != null) {
                      return afterFunctions.d(result, req.user, function(err, result) {
                        if (err) {
                          return res.send(500, err.message);
                        } else {
                          return res.send(204, h.wrap(result, name));
                        }
                      });
                    } else {
                      return res.send(204, h.wrap(result, name));
                    }
                  }
                });
              }
            }
          });
        }
      }
    });
  });
};

api = module.exports = {
  middleware: function(req, res, next) {
    if (me.settings.namespace != null) {
      if (req.path.toLowerCase().indexOf(me.settings.namespace.toLowerCase()) >= 0) {
        res.set('Last-Modified', (new Date()).toUTCString());
      }
    }
    return next();
  },
  bind: function(app) {
    var cname, model, models, name, root, url;
    root = '/' + (me.settings.namespace || '');
    models = mongoose.models;
    for (name in models) {
      model = models[name];
      cname = utils.toCollectionName(name);
      url = root + '/' + cname;
      crud(app, url, name);
    }
  }
};
