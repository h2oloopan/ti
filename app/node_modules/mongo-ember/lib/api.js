// Generated by CoffeeScript 1.7.1
var api, crud, h, me, mongoose, utils;

mongoose = require('mongoose');

utils = require('mongoose/lib/utils');

me = require('./mongo-ember');

h = require('./helper');

crud = function(app, url, name) {
  var authFunctions, cname, dummyAuthFunction, model, pf;
  model = mongoose.models[name];
  cname = utils.toCollectionName(name);
  pf = me.settings.powerField;
  authFunctions = me.getModelDefinition(name).auth;
  if (authFunctions == null) {
    authFunctions = {};
  }
  dummyAuthFunction = function(req, user, power, cb) {
    return cb(null);
  };
  app.post(url, function(req, res) {
    var af, power;
    af = authFunctions.c || dummyAuthFunction;
    power = req.user ? req.user[pf] : me.settings.defaultPower;
    return af(req.user, power, function(err) {
      var obj;
      if (err) {
        return res.send(401, err.message);
      } else {
        obj = h.unwrap(req.body);
        obj = new model(obj);
        return obj.save(function(err, result) {
          if (err) {
            return res.send(500, err.message);
          } else {
            return res.send(201, h.wrap(result, name));
          }
        });
      }
    });
  });
  app.get(url, function(req, res) {
    var af, power;
    af = authFunctions.ra || dummyAuthFunction;
    power = req.user ? req.user[pf] : me.settings.defaultPower;
    return af(req, req.user, power, function(err) {
      if (err) {
        return res.send(401, err.message);
      } else {
        return model.find({}, function(err, result) {
          if (err) {
            return res.send(500, err.message);
          } else {
            return res.send(200, h.wrap(result, cname));
          }
        });
      }
    });
  });
  app.get(url + '/:id', function(req, res) {
    var af, power;
    af = authFunctions.ro || dummyAuthFunction;
    power = req.user ? req.user[pf] : me.settings.defaultPower;
    return af(req, req.user, power, function(err) {
      var id;
      if (err) {
        return res.send(401, err.message);
      } else {
        id = req.params.id;
        return model.findById(id, function(err, result) {
          if (err) {
            return res.send(500, err.message);
          } else {
            return res.send(200, h.wrap(result, name));
          }
        });
      }
    });
  });
  app.put(url + '/:id', function(req, res) {
    var af, power;
    af = authFunctions.u || dummyAuthFunction;
    power = req.user ? req.user[pf] : me.settings.defaultPower;
    return af(req, req.user, power, function(err) {
      var id, obj;
      if (err) {
        return res.send(401, err.message);
      } else {
        id = req.params.id;
        obj = h.unwrap(req.body);
        return model.findByIdAndUpdate(id, obj, function(err, result) {
          if (err) {
            return res.send(500, err.message);
          } else {
            return res.send(200, h.wrap(result, name));
          }
        });
      }
    });
  });
  return app["delete"](url + '/:id', function(req, res) {
    var af, power;
    af = authFunctions.d || dummyAuthFunction;
    power = req.user ? req.user[pf] : me.settings.defaultPower;
    return af(req, req.user, power, function(err) {
      var id;
      if (err) {
        return res.send(401, err.message);
      } else {
        id = req.params.id;
        return model.findById(id, function(err, result) {
          if (err) {
            return res.send(500, err.message);
          } else if (result == null) {
            return res.send(500, 'No matching item to delete');
          } else {
            return result.remove(function(err, result) {
              if (err) {
                return res.send(500, err.message);
              } else {
                return res.send(204);
              }
            });
          }
        });
      }
    });
  });
};

api = module.exports = {
  bind: function(app) {
    var cname, model, models, name, root, url;
    root = '/' + (me.settings.namespace || '');
    models = mongoose.models;
    for (name in models) {
      model = models[name];
      cname = utils.toCollectionName(name);
      url = root + '/' + cname;
      crud(app, url, name);
    }
  }
};
