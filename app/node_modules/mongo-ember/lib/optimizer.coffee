exec = require('child_process').exec
path = require 'path'
fs = require 'fs'
vm = require 'vm'


uglify = require 'uglify-js'
minifier = require 'html-minifier'

modulePath = path.resolve path.dirname(__filename), '../'


compile = (folder, ext, cb) ->
	HANDLEBARS = fs.readFileSync path.join(modulePath, 'js/handlebars.js'), 'utf8'
	EMBER = fs.readFileSync path.join(modulePath, 'js/ember.js'), 'utf8'

	getSandbox = ->
		#dummy jQuery
		jQuery = ->
			return jQuery
		jQuery.ready = ->
			return jQuery
		jQuery.inArray = ->
			return jQuery
		jQuery.jquery = '1.8.3'
		jQuery.event = 
			fixHooks: {}

		#dummy DOM element
		element = 
			firstChild: ->
				return element
			innerHTML: ->
				return element
			setAttribute: ->
				return element
			appendChild: ->
				return element
			innerHTML: '<input name="foo">'
			childNodes: [
				{nodeValue: 'Test: '}
				{nodeValue: ''}
				{nodeValue: 'Value'}
			]

		sandbox = 
			document:
				createRange: false
				createElement: ->
					return element
			console: console
			jQuery: jQuery
			$: jQuery
			setTimeout: setTimeout

		sandbox.window = sandbox
		return sandbox

	getContext = (extras) ->
		sandbox = getSandbox()
		extras = extras || {}
		for attr of extras
			sandbox[attr] = extras[attr]

		context = vm.createContext sandbox
		vm.runInContext HANDLEBARS, context, 'handlebars.js'
		vm.runInContext EMBER, context, 'ember.js'
		return context

	doWork = (dir) ->
		files = fs.readdirSync dir
		for file in files
			do (file) ->
				file = path.join dir, file
				if !fs.statSync(file).isDirectory()
					if path.extname(file) == ext
						#minify html
						content = fs.readFileSync file,
							encoding: 'utf8'

						#compile result to Ember templates
						console.log 'compiling ' + file
						out = file.replace ext, '.js'
						context = getContext
							template: content
							templatejs: null
						vm.runInContext 'templatejs = Ember.Handlebars.precompile(template).toString()', context
						template = 'Ember.Handlebars.template(' + context.templatejs + ')'

						isComponent = ( out.toLowerCase().indexOf('components') >= 0 )
						templateName = out.substr 0, out.length - 3 #remove trailing .js
						templateName = templateName.substr templateName.lastIndexOf('/') + 1
						if isComponent then templateName = 'components/' + templateName
						templateName = templateName.replace '.', '/'
						templateJs = 'Ember.TEMPLATES["' + templateName + '"] = ' + template + ';'

						#minify js
						console.log 'minifying ' + out
						result = uglify.minify templateJs,
							fromString: true
						fs.writeFileSync out, result.code

				else
					doWork file
	try
		doWork folder
		cb null
	catch err
		cb err

optimizer = module.exports =
	optimize: (options) ->
		#default settings
		compileHandlebars = options.compileHandlebars || false
		minifyJS = options.minifyJS || false
		folder = options.publicFolder || null
		excludePath = options.excludePath || null
		templatePath = options.templatePath || null
		templateExtension = options.templateExtension || '.html'

		if compileHandlebars && folder? && templatePath?
			#compile handlebars
			templateFolder = path.join folder, templatePath
			compile templateFolder, templateExtension, (err) ->
				if err
					console.log err
				else
					console.log 'Handlebars compiled...'