// Generated by CoffeeScript 1.7.1
var auth, authenticate, crypto, deserialize, encrypt, h, login, me, mongoose, prepare, serialize, utils;

crypto = require('crypto');

mongoose = require('mongoose');

utils = require('mongoose/lib/utils');

me = require('./mongo-ember');

h = require('./helper');

encrypt = function(input) {
  var sha;
  sha = crypto.createHash('sha256');
  sha.update(input);
  return sha.digest('hex').toString();
};

serialize = function(user, cb) {
  return cb(null, user[me.settings.primaryKey]);
};

deserialize = function(id, cb) {
  return mongoose.models[me.settings.userModel].findById(id, function(err, result) {
    if (err) {
      return cb(err);
    } else if (result == null) {
      return cb(new Error('User does not exist'));
    } else {
      return cb(null, result);
    }
  });
};

prepare = function(user) {
  if (user[me.settings.passwordField] != null) {
    delete user[me.settings.passwordField];
  }
  return user;
};

authenticate = function(user, cb) {
  var model, pf, toAuth, uf;
  uf = me.settings.usernameField;
  pf = me.settings.passwordField;
  toAuth = {};
  toAuth[uf] = user[uf];
  toAuth[pf] = encrypt(user[pf]);
  model = mongoose.models[me.settings.userModel];
  return model.findOne(toAuth, function(err, result) {
    if (err) {
      return cb(err);
    } else if (result == null) {
      return cb(new Error('Cannot find a matching user'));
    } else {
      return cb(null, result);
    }
  });
};

login = function(user, req, res) {
  return authenticate(user, function(err, user) {
    if (err) {
      return res.send(500, err.message);
    } else {
      user = user.toObject();
      return serialize(user, function(err, id) {
        if (err) {
          return res.send(500, err.message);
        } else {
          req.session[me.settings.sessionKey] = id;
          return res.send(200, prepare(user));
        }
      });
    }
  });
};

auth = module.exports = {
  bind: function(app) {
    var cname, model, name, pf, uf, url;
    uf = me.settings.usernameField;
    pf = me.settings.passwordField;
    url = me.settings.authPath;
    name = me.settings.userModel;
    cname = utils.toCollectionName(name);
    model = mongoose.models[name];
    app.post(url + '/signup', function(req, res) {
      var test, user;
      user = h.unwrap(req.body);
      if (user[pf] == null) {
        return res.send(500, 'password must be present');
      } else {
        test = {};
        test[uf] = user[uf];
        return model.findOne(test, function(err, result) {
          if (err) {
            return res.send(500, err.message);
          } else if (result != null) {
            return res.send(500, uf + 'was already registered');
          } else {
            user[pf] = encrypt(user[pf]);
            user = new model(user);
            return user.save(function(err, result) {
              if (err) {
                return res.send(500, err.message);
              } else {
                return res.send(201, {});
              }
            });
          }
        });
      }
    });
    app.get(url + '/check', function(req, res) {
      if (req.user != null) {
        return res.send(200, prepare(req.user));
      } else {
        return res.send(401);
      }
    });
    app.post(url + '/login', function(req, res) {
      var user;
      user = h.unwrap(req.body);
      if (user[pf] == null) {
        return res.send(500, 'password must be present');
      } else {
        return login(user, req, res);
      }
    });
    app.get(url + '/logout', function(req, res) {
      if (req.session[me.settings.sessionKey] != null) {
        req.session[me.settings.sessionKey] = null;
      }
      return res.send(200, {});
    });
    return app.get(url + '/power/:power', function(req, res) {
      var rPower, uPower;
      if (req.user == null) {
        return res.send(401);
      } else {
        uPower = req.user[me.settings.powerField];
        rPower = parseInt(req.params.power);
        if (uPower >= rPower) {
          return res.send(200, {});
        } else {
          return res.send(401);
        }
      }
    });
  },
  middleware: function(req, res, next) {
    var id;
    id = req.session[me.settings.sessionKey];
    if (id != null) {
      return deserialize(id, function(err, user) {
        if (err) {
          req['user'] = null;
        } else {
          req['user'] = user.toObject();
        }
        return next();
      });
    } else {
      req['user'] = null;
      return next();
    }
  }
};
