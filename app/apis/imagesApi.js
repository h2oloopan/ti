// Generated by CoffeeScript 1.7.1
var authorizer, config, folder, fs, gm, me, mkdirp, moment, path, rimraf, tempFolder;

fs = require('fs');

path = require('path');

gm = require('gm');

moment = require('moment');

mkdirp = require('mkdirp');

rimraf = require('rimraf');

me = require('mongo-ember');

authorizer = require('../helpers/authorizer');

config = require('../config');

folder = path.resolve(config.image.questionImageFolder);

tempFolder = path.join(path.resolve(config.image.tempFolder), 'questions');

exports.bind = function(app) {
  var negative, positive, process;
  app.get('/api/images/questions/:qid', function(req, res) {
    var listFolder, qid;
    qid = req.params.qid;
    listFolder = path.join(folder, qid);
    return fs.readdir(listFolder, function(err, files) {
      var file, list;
      if (err) {
        return res.send(500, err.message);
      } else {
        list = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = files.length; _i < _len; _i++) {
            file = files[_i];
            if (path.extname(file) === config.image.format) {
              _results.push(file);
            }
          }
          return _results;
        })();
        list.sort(function(a, b) {
          var aTime, bTime;
          aTime = parseInt(a.substr(0, a.length - config.image.format.length));
          bTime = parseInt(b.substr(0, b.length - config.image.format.length));
          return aTime - bTime;
        });
        return res.send(200, list);
      }
    });
  });
  negative = function(req, res, err) {
    console.log(err);
    console.log(err.stack);
    return res.send(500, {
      files: [
        {
          name: req.files.file.originalName,
          size: req.files.file.size,
          error: err.message
        }
      ]
    });
  };
  positive = function(req, res, url) {
    return res.send(200, {
      files: [
        {
          name: req.files.file.originalName,
          size: req.files.file.size,
          url: url
        }
      ]
    });
  };
  process = function(input, output, cb) {
    return gm(input).quality(config.image.quality).write(output, function(err) {
      return cb(err);
    });
  };
  app["delete"]('/api/images/temp', function(req, res) {
    fs.readdir(tempFolder, function(err, files) {
      var file, _i, _len, _results;
      if (err) {
        return console.log(err);
      }
      _results = [];
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        _results.push(rimraf(path.join(tempFolder, file), function(err) {
          if (err) {
            return console.log(err);
          }
        }));
      }
      return _results;
    });
    return res.send(204);
  });
  app.post('/api/images/temp', function(req, res) {
    var translate;
    if (req.user == null) {
      return res.send(401, 'You do not have the permission to access this');
    }
    if (req.user.power < 999 && req.user.role.name !== 'editor') {
      return res.send(401, 'You do not have the permission to access this');
    }
    translate = function(url) {
      return path.relative(path.resolve('public'), url);
    };
    return mkdirp(tempFolder, function(err) {
      var destination, file, iid;
      if (err) {
        return negative(req, res, err);
      } else {
        iid = '' + moment().unix();
        file = path.resolve(req.files.file.path);
        destination = path.join(tempFolder, iid + config.image.format);
        return process(file, destination, function(err) {
          if (err) {
            return negative(req, res, err);
          } else {
            fs.unlink(file);
            return positive(req, res, translate(destination));
          }
        });
      }
    });
  });
  app["delete"]('/api/images/location', function(req, res) {
    var file;
    if (req.user == null) {
      return res.send(401, 'You do not have the permission to access this');
    }
    if (req.user.power < 999 && req.user.role.name !== 'editor') {
      return res.send(401, 'You do not have the permission to access this');
    }
    file = req.query.url;
    file = path.join(path.resolve('public'), file);
    if (file.toLowerCase().indexOf(tempFolder.toLowerCase()) < 0) {
      return res.send(401, 'You do not have the permission to access this');
    }
    return fs.unlink(file, function(err) {
      if (err) {
        return res.send(500, err.message);
      } else {
        return res.send(204);
      }
    });
  });
  app.post('/api/images/questions/:qid', function(req, res) {
    var Question, iid, qid;
    qid = req.params.qid;
    iid = moment().unix();
    Question = me.getModel('question');
    return Question.find({
      _id: qid
    }, function(err, question) {
      var destination, file, user;
      if (err) {
        return negative(req, res, err);
      } else {
        user = req.user;
        if (user.power >= 999 || authorizer.canAccessQuestion(user, question)) {
          file = path.resolve(req.files.file.path);
          destination = path.join(folder, qid, iid + config.image.format);
          return gm(file).quality(config.image.quality).write(destination, function(err) {
            if (err) {
              return negative(req, res, err);
            } else {
              fs.unlink(file);
              return positive(req, res, destination);
            }
          });
        } else {
          return negative(req, res, new Error('You do not have the privilege to access this'));
        }
      }
    });
  });
  return app["delete"]('/api/images/questions/:qid/:iid', function(req, res) {});
};
