// Generated by CoffeeScript 1.7.1
var authorizer, config, folder, fs, gm, me, moment, path;

fs = require('fs');

path = require('path');

gm = require('gm');

moment = require('moment');

me = require('mongo-ember');

authorizer = require('../helpers/authorizer');

config = require('../config');

folder = path.resolve(config.image.questionImageFolder);

console.log(folder);

exports.bind = function(app) {
  app.get('/api/images/questions/:qid', function(req, res) {
    var listFolder, qid;
    qid = req.params.qid;
    listFolder = path.join(folder, qid);
    return fs.readdir(listFolder, function(err, files) {
      var file, list;
      if (err) {
        return res.send(500, err.message);
      } else {
        list = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = files.length; _i < _len; _i++) {
            file = files[_i];
            if (path.extname(file) === config.image.format) {
              _results.push(file);
            }
          }
          return _results;
        })();
        list.sort(function(a, b) {
          var aTime, bTime;
          aTime = parseInt(a.substr(0, a.length - config.image.format.length));
          bTime = parseInt(b.substr(0, b.length - config.image.format.length));
          return aTime - bTime;
        });
        return res.send(200, list);
      }
    });
  });
  app.post('/api/images/questions/:qid', function(req, res) {
    var Question, iid, negative, positive, qid;
    qid = req.params.qid;
    iid = moment().unix();
    Question = me.getModel('question');
    negative = function(req, res, err) {
      return res.send(500, {
        files: [
          {
            name: req.files.file.originalName,
            size: req.files.file.size,
            error: err.message
          }
        ]
      });
    };
    positive = function(req, res, url) {
      return res.send(200, {
        files: [
          {
            name: req.files.file.originalName,
            size: req.files.file.size,
            url: url
          }
        ]
      });
    };
    return Question.find({
      _id: qid
    }, function(err, question) {
      var destination, file, user;
      if (err) {
        return negative(req, res, err);
      } else {
        user = req.user;
        if (user.power >= 999 || authorizer.canAccessQuestion(user, question)) {
          file = path.resolve(req.files.file.path);
          destination = path.join(folder, qid, iid + config.image.format);
          return gm(file).resize(config.image.width, config.image.height, '!').quality(config.image.quality).write(destination, function(err) {
            if (err) {
              return negative(req, res, err);
            } else {
              fs.unlink(file);
              return positive(req, res, destination);
            }
          });
        } else {
          return negative(req, res, new Error('You do not have the privilege to access this'));
        }
      }
    });
  });
  return app["delete"]('/api/images/questions/:qid/:iid', function(req, res) {});
};
